/* eslint-disable @typescript-eslint/no-explicit-any */
// services/productService.ts

import { ProductDetailResponse } from "../types/detail"

class ProductService {
  private baseURL: string

  constructor() {
    // ‚úÖ USAR VARIABLE DE ENTORNO
    this.baseURL = process.env.API_URL || "https://pf-grupo5-8.onrender.com"
  }

  async getProductDetail(id: string): Promise<ProductDetailResponse> {
    const url = `${this.baseURL}/products/${id}`

    console.log("üîó Obteniendo detalle del producto:", url)

    const response = await fetch(url, {
      method: "GET",
      headers: {
        "Content-Type": "application/json",
      },
    })

    if (!response.ok) {
      console.error("‚ùå Error en getProductDetail:", response.status)
      throw new Error(`Error ${response.status}: ${response.statusText}`)
    }

    const data = await response.json()
    console.log("‚úÖ Detalle del producto obtenido:", data.id)

    return data
  }

  async getCategories() {
    const url = `${this.baseURL}/categories`

    console.log("üîó Obteniendo categor√≠as:", url)

    const response = await fetch(url, {
      method: "GET",
      headers: {
        "Content-Type": "application/json",
      },
    })

    if (!response.ok) {
      console.error("‚ùå Error en getCategories:", response.status)
      throw new Error(`Error ${response.status}: ${response.statusText}`)
    }

    const data = await response.json()
    console.log("‚úÖ Categor√≠as obtenidas:", data.length || 0)

    return data
  }

  // ‚úÖ BONUS: M√©todo para crear producto (si lo necesitas despu√©s)
  async createProduct(productData: any) {
    const url = `${this.baseURL}/products`

    console.log("üîó Creando producto:", url)

    const response = await fetch(url, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        // Agregar Authorization si es necesario:
        // "Authorization": `Bearer ${localStorage.getItem("token")}`
      },
      body: JSON.stringify(productData),
    })

    if (!response.ok) {
      console.error("‚ùå Error en createProduct:", response.status)
      throw new Error(`Error ${response.status}: ${response.statusText}`)
    }

    const data = await response.json()
    console.log("‚úÖ Producto creado:", data.id)

    return data
  }

  // ‚úÖ BONUS: M√©todo para actualizar producto
  async updateProduct(id: string, productData: any) {
    const url = `${this.baseURL}/products/${id}`

    console.log("üîó Actualizando producto:", url)

    const response = await fetch(url, {
      method: "PUT",
      headers: {
        "Content-Type": "application/json",
        // Agregar Authorization si es necesario:
        // "Authorization": `Bearer ${localStorage.getItem("token")}`
      },
      body: JSON.stringify(productData),
    })

    if (!response.ok) {
      console.error("‚ùå Error en updateProduct:", response.status)
      throw new Error(`Error ${response.status}: ${response.statusText}`)
    }

    const data = await response.json()
    console.log("‚úÖ Producto actualizado:", data.id)

    return data
  }
}

export const productService = new ProductService()
